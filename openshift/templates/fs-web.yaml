---

# The Fragalysis Stack's Web (Front-End) deployment.
#
# oc process -f fs-web.yaml | oc create -f -
# oc delete all --selector template=fs-web

kind: Template
apiVersion: v1
metadata:
  name: fs-web
  annotations:
    description: Fragalysis Stack's Web Definition
    tags: fragalysis,web
labels:
  template: fs-web

parameters:

- name: BUSYBOX_IMAGE
  value: busybox:1.28.0

- name: WEB_NAMESPACE
  value: fragalysis-dev

- name: WEB_NAME
  value: web
- name: WEB_TAG
  value: 'latest'
- name: WEB_REPLICAS
  value: '1'
- name: WEB_GRAPH_SERVICE
  value: neo4j.fragalysis-graph-3
- name: WEB_MYSQL_SERVICE
  value: mysql
- name: WEB_VOLUME_CLAIM_NAME
  value: fs-web-media-claim
- name: WEB_BUILD_XCDB
  value: 'yes'

objects:

- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: ${WEB_NAME}
    namespace: ${WEB_NAMESPACE}
  spec:
    replicas: ${WEB_REPLICAS}
    selector:
      name: ${WEB_NAME}
    strategy:
      type: Rolling
    template:
      metadata:
        labels:
          name: ${WEB_NAME}
      spec:
        nodeSelector:
          purpose: 'app'
        serviceAccountName: diamond

        # Init Containers
        initContainers:
        - image: ${BUSYBOX_IMAGE}
          name: wait-for-db
          command:
          - 'sh'
          - '-c'
          - 'until nslookup ${WEB_MYSQL_SERVICE}; do echo waiting for db; sleep 1; done;'
          env:
          - name: WEB_MYSQL_SERVICE
            value: ${WEB_MYSQL_SERVICE}
        - image: ${BUSYBOX_IMAGE}
          name: wait-for-graph
          command:
          - 'sh'
          - '-c'
          - 'until nslookup ${WEB_GRAPH_SERVICE}; do echo waiting for neo4j; sleep 1; done;'
          env:
          - name: WEB_GRAPH_SERVICE
            value: ${WEB_GRAPH_SERVICE}

        # Application containers
        containers:
        - name: ${WEB_NAME}
          imagePullPolicy: Always
          # Expect the earliest that the container can be ready is 60 seconds.
          # But check every 15 seconds and permit 36 failures before
          # considering the startup to have failed (that's about 10 minutes).
          readinessProbe:
            initialDelaySeconds: 60
            periodSeconds: 15
            timeoutSeconds: 3
            failureThreshold: 36
            tcpSocket:
              port: 80
          # Consider the container dead if the port is not open
          # after 4 attempts over a 2 minute period after about 10 minutes.
          livenessProbe:
            initialDelaySeconds: 630
            periodSeconds: 30
            timeoutSeconds: 3
            failureThreshold: 4
            tcpSocket:
              port: 80
          env:
          - name: WEB_DJANGO_SECRET_KEY
            valueFrom:
              secretKeyRef:
                name: fs-web-secrets
                key: django-secret-key
          - name: WEB_DJANGO_SUPERUSER_NAME
            valueFrom:
              secretKeyRef:
                name: fs-web-secrets
                key: django-superuser-name
          - name: WEB_DJANGO_SUPERUSER_PASSWORD
            valueFrom:
              secretKeyRef:
                name: fs-web-secrets
                key: django-superuser-password
          - name: WEB_DJANGO_SUPERUSER_EMAIL
            valueFrom:
              secretKeyRef:
                name: fs-web-secrets
                key: django-superuser-email
          - name: MYSQL_HOST
            valueFrom:
              secretKeyRef:
                name: fs-mysql-secrets
                key: database-host
          - name: MYSQL_PORT
            valueFrom:
              secretKeyRef:
                name: fs-mysql-secrets
                key: database-port
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                name: fs-mysql-secrets
                key: database-user
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: fs-mysql-secrets
                key: database-password
          - name: MYSQL_DATABASE
            valueFrom:
              secretKeyRef:
                name: fs-mysql-secrets
                key: database
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: fs-mysql-secrets
                key: database-root-password
          - name: ISPYB_USER
            valueFrom:
              secretKeyRef:
                name: fs-ispyb-secrets
                key: ispyb-user
          - name: ISPYB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: fs-ispyb-secrets
                key: ispyb-password
          - name: ISPYB_HOST
            valueFrom:
              secretKeyRef:
                name: fs-ispyb-secrets
                key: ispyb-host
          - name: ISPYB_PORT
            valueFrom:
              secretKeyRef:
                name: fs-ispyb-secrets
                key: ispyb-port
          - name: NEO4J_BOLT_URL
            valueFrom:
              secretKeyRef:
                name: fs-graph-secrets
                key: graph-bolt-url
          - name: NEO4J_QUERY
            valueFrom:
              secretKeyRef:
                name: fs-graph-secrets
                key: graph-service-name
          - name: XCHEM_NAME
            valueFrom:
              secretKeyRef:
                name: fs-xchem-secrets
                key: xchem-name
          - name: XCHEM_USER
            valueFrom:
              secretKeyRef:
                name: fs-xchem-secrets
                key: xchem-user
          - name: XCHEM_PASSWORD
            valueFrom:
              secretKeyRef:
                name: fs-xchem-secrets
                key: xchem-password
          - name: XCHEM_HOST
            valueFrom:
              secretKeyRef:
                name: fs-xchem-secrets
                key: xchem-host
          - name: XCHEM_PORT
            valueFrom:
              secretKeyRef:
                name: fs-xchem-secrets
                key: xchem-port
          - name: BUILD_XCDB
            value: ${WEB_BUILD_XCDB}
          ports:
          - containerPort: 80
          volumeMounts:
          - name: fs-web-media
            mountPath: /code/media
        volumes:
        - name: fs-web-media
          persistentVolumeClaim:
            claimName: ${WEB_VOLUME_CLAIM_NAME}
        restartPolicy: Always

    triggers:
     - type: ConfigChange
     - type: ImageChange
       imageChangeParams:
         automatic: true
         containerNames:
         - ${WEB_NAME}
         from:
           kind: ImageStreamTag
           name: web-stream:${WEB_TAG}
