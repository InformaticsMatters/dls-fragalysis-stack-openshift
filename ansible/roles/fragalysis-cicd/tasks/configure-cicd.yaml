---

#Â Configure the Jenkins Project.
# Here a jenkins application is expected in the
# CI/CD project.

- name: Get Projects
  shell: oc get projects
  register: projects_result
  changed_when: False

- name: Assert the Fragalysis CI/CD Project Exists
  assert:
    that: cicd_namespace in projects_result.stdout

- name: Move to Fragalysis CI/CD Project
  shell: oc project {{ cicd_namespace }}
  changed_when: False

# Check the Jenkins user exists

- name: Check Jenkins User
  shell: oc get users
  register: users_result

- name: Assert Jenkins User Exists
  assert:
    that: jenkins_user in users_result.stdout

# Check and create the Jenkins user roles

- name: Check Jenkins Role
  shell: oc adm policy who-can update imagestreamimages
  register: who_can_result
  changed_when: False

- name: Give Roles to Jenkins
  shell: "{{ item }}"
  loop:
  - oc adm policy add-role-to-user system:registry {{ jenkins_user }}
  - oc adm policy add-role-to-user system:image-builder {{ jenkins_user }}
  - oc adm policy add-role-to-user admin {{ jenkins_user }}
  - oc adm policy add-scc-to-user -z {{ jenkins_user }} privileged
  when: jenkins_user not in who_can_result.stdout

# Create the Data Input PV/PVC
# This is where the Web and Graph data is expected to be found.

- name: Check PVs
  shell: oc get pv
  register: pv_result
  when: input_vol_is_nfs
  changed_when: False

- name: Create Input PV
  shell: >
    oc process -f {{ role_path }}/files/fs-input-pv-nfs.yaml
    -p INPUT_NAMESPACE={{ cicd_namespace }}
    -p INPUT_VOLUME_NAME={{ input_vol_name }}
    | oc create -f -
  when:
  - input_vol_is_nfs
  - not pv_result.stdout | regex_search('^fs-input\s', multiline=True)

- name: Wait for PVs to become Available
  shell: oc get pv/{{ item }} | grep Available
  delay: 5
  retries: "{{ (pv_create_timeout_s|int / 5)|int }}"
  register: result
  until: result.rc == 0
  loop:
  - fs-input
  when:
  - input_vol_is_nfs
  - not pv_result.stdout | regex_search('^fs-input\s', multiline=True)
  changed_when: False

# Create the Input PVCs

- name: Check Input PVC
  shell: oc get pvc
  register: input_pvc
  changed_when: False

- name: Create Input PVC
  shell: >
    oc process -f {{ role_path }}/files/fs-input-pvc.yaml
    -p INPUT_VOLUME_NAME={{ input_vol_name }}
    | oc create -f -
  when: not input_pvc.stdout | regex_search('^fs-input-claim\s', multiline=True)

- name: Wait for Input PVC to become Bound
  shell: >
    oc get pvc/{{ item }} | grep Bound
  retries: 12
  delay: 5
  register: result
  until: result.rc == 0
  loop:
  - fs-input-claim
  when: not input_pvc.stdout | regex_search('^fs-input-claim\s', multiline=True)
  changed_when: False

# Create the Web (Buildah) Slave Agents

- name: Check Buildah Agent ImageStreams
  shell: oc get is
  register: agent_is
  changed_when: False

- name: Create Agent ImageStreams
  shell: >
    oc process -f {{ role_path }}/files/fs-jenkins-{{ item }}-agent-is.yaml
    | oc create -f -
  loop:
  - buildah-slave
  - graph-slave
  - loadah-slave
  when: not agent_is.stdout | regex_search('^%s\s' % item, multiline=True)

# Configure Jenkins?
# i.e. set secrets ctc.

#- name: Configure Jenkins Jobs/Secrets
#  shell: >
#    {{ role_path }}/../../../jenkins/configure-cicd.py set test --force
#  when: configure_jenkins
