---

- name: Move to Fragalysis Project (DEV)
  shell: oc project {{ namespace }}
  changed_when: False

# Check and create the Jenkins user roles

# Give the jenkins user access to this project.
# The builds take place in the CI/CD project and images
# need to be pushed to this project.
# The system:image-builder role allows both pull and push capability.
#
# See: -
#
#   https://docs.openshift.com/container-platform/3.9/
#         install_config/registry/accessing_registry.html
#
# And a handy crib-sheet of verbs and names that can be used
# with the 'oc adm policy who-can' command...
#
#   https://docs.openshift.com/container-platform/3.6/
#          architecture/additional_concepts/
#          authorization.html#evaluating-authorization

- name: Check Jenkins Role
  shell: oc adm policy who-can update imagestreamimages
  register: who_can_result
  changed_when: False

- name: Give Roles to Jenkins
  shell: "{{ item }}"
  loop:
  - oc adm policy add-role-to-user system:registry {{ jenkins_user }}
  - oc adm policy add-role-to-user system:image-builder {{ jenkins_user }}
  - oc adm policy add-role-to-user admin {{ jenkins_user }}
  - oc adm policy add-scc-to-user -z {{ jenkins_user }} privileged
  when: jenkins_user not in who_can_result.stdout

#Â To allow any CI/CD job to push images to this project/namespace
# the jenkins SA (used by the agents that run the Job) in the CI/CD project
# must have the 'image-pusher' role in for this project...

- name: Move to CI/CD Project (image-pusher)
  shell: oc project {{ cicd_namespace }}
  changed_when: False
  when: jenkins_user not in who_can_result.stdout

- name: Add image-pusher rights to {{ jenkins_user }} SA
  shell: >
    oc policy add-role-to-user system:image-pusher
    system:serviceaccount:{{ cicd_namespace }}:{{ jenkins_user }}
    --namespace={{ namespace }}
  when: jenkins_user not in who_can_result.stdout

# Check PVs

- name: Check PV
  shell: oc get pv
  register: pv_result
  changed_when: False

# Create the Data Input PV
# This is where the Web and Graph data is expected to be found.

- name: Create Input PV
  shell: >
    oc process -f {{ role_path }}/{{ t_dir }}/fs-input-pv-nfs.yaml
    -p INPUT_NAMESPACE={{ namespace }}
    -p INPUT_VOLUME_NAME={{ input_vol_name }}
    | oc create -f -
  when:
  - not pv_result.stdout | regex_search('^%s\s' % input_vol_name, multiline=True)

# Wait for Input PV to become "Available"...
# We only do this if we created the PV in this session.

- name: Wait for Input PV to become Available
  shell: oc get pv/{{ item }} | grep Available
  delay: 5
  retries: "{{ (pv_create_timeout_s|int / 5)|int }}"
  register: result
  until: result.rc == 0
  loop:
  - "{{ input_vol_name }}"
  when:
  - not pv_result.stdout | regex_search('^%s\s' % input_vol_name, multiline=True)
  changed_when: False

# Create the Input PVC

- name: Check Input PVC
  shell: oc get pvc
  register: input_pvc
  changed_when: False

- name: Create Input PVC
  shell: >
    oc process -f {{ role_path }}/{{ t_dir }}/fs-input-pvc.yaml
    -p INPUT_VOLUME_NAME={{ input_vol_name }}
    | oc create -f -
  when: '"fs-input-claim" not in input_pvc.stdout'

- name: Wait for Input PVC to become Bound
  shell: >
    oc get pvc/{{ item }} | grep Bound
  retries: 12
  delay: 5
  register: result
  until: result.rc == 0
  loop:
  - fs-input-claim
  when: item not in input_pvc.stdout
  changed_when: False
