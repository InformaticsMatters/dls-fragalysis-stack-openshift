---

# Deduplicate results.
#
# This play attempts to de-duplicates nodes and edges
# (unless they're already de-duplicated). It then reports on the
# respective file sizes and then compresses the resultant txt files.
# It is an error if there are no nodes or edges.

# Delete nextflow files?
# This may save significant space.

- name: Delete nextflow standard
  file:
    path: "{{ workflow_path }}/standardised-compounds.tab.gz"
    state: absent
  when: delete_nextflow_as_needed|bool

- name: Delete nextflow work
  file:
    path: "{{ workflow_path }}/work"
    state: absent
  when: delete_nextflow_as_needed|bool

# Deduplicate Nodes

- name: Check compressed Nodes
  stat:
    path: "{{ dedupe_path }}/nodes.txt.gz"
  register: nodes_gz_file

- name: Deduplicate Nodes
  shell: >-
    zcat *.nodes.gz | sort --temporary-directory={{ tmp_path }} -u
    > {{ dedupe_path }}/nodes.txt
  environment:
    LC_ALL: C
  args:
    chdir: "{{ workflow_path }}/results"
  when: not nodes_gz_file.stat.exists

- name: Collect node count
  shell: cat {{ dedupe_path }}/nodes.txt | wc -l
  register: nodes_lines
  when: not nodes_gz_file.stat.exists

- name: Report node count
  debug:
    msg: Node count is {{ nodes_lines.stdout }}
  when: not nodes_gz_file.stat.exists

- name: Assert we have nodes
  assert:
    that:
    - nodes_lines.stdout|int > 0
    msg: There are no NODES in the compressed file
  when: not nodes_gz_file.stat.exists

# Compress the nodes.
# This prevents unnecessary re-de-duplication
# if the playbook is re-run.

- name: Compress nodes
  shell: gzip {{ tgt }}
  environment:
    LC_ALL: C
  args:
    creates: "{{ tgt }}.gz"
  vars:
    tgt: "{{ dedupe_path }}/nodes.txt"

# Deduplicate Edges

- name: Check compressed Edges
  stat:
    path: "{{ dedupe_path }}/edges.txt.gz"
  register: edges_gz_file

- name: Deduplicate Edges
  shell: >-
    zcat *.edges.gz | sort --temporary-directory={{ tmp_path }} -u
    > {{ dedupe_path }}/edges.txt
  environment:
    LC_ALL: C
  args:
    chdir: "{{ workflow_path }}/results"
  when: not edges_gz_file.stat.exists

- name: Collect edge count
  shell: cat {{ dedupe_path }}/edges.txt | wc -l
  register: edges_lines
  when: not edges_gz_file.stat.exists

- name: Report edge count
  debug:
    msg: Edge Count is {{ edges_lines.stdout }}
  when: not edges_gz_file.stat.exists

- name: Assert we have edges
  assert:
    that:
    - edges_lines.stdout|int > 0
    msg: There are no EDGES in the compressed file
  when: not edges_gz_file.stat.exists

# Compress the edges.
# This prevents unnecessary re-de-duplication
# if the playbook is re-run.

- name: Compress edges
  shell: gzip {{ tgt }}
  environment:
    LC_ALL: C
  args:
    creates: "{{ tgt }}.gz"
  vars:
    tgt: "{{ dedupe_path }}/edges.txt"

# We've de-duplicated the nextflow results
# so we can now delete them.
# This may save significant space.

- name: Delete nextflow results
  file:
    path: "{{ workflow_path }}/results"
    state: absent
  when: delete_nextflow_as_needed|bool
