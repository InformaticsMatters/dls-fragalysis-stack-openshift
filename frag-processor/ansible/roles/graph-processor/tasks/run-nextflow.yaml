---

# If there's a 'done' file in the de-duplication directory
# then we skip nextflow processing. This happens
# if we're re-running and do not want to 'clean-up'.

- name: Check de-duplciation directory.
  stat:
    path: "{{ dedupe_path }}/done"
  register: dedupe_done_file

- name: Check nextflow
  shell: echo -n $(pgrep java)
  register: nextflow_result
  when: not dedupe_done_file.stat.exists

- name: Get standard file
  shell: >-
    {{ scripts }}/graph_get_standard_file.py
    {{ process_path }}/standard-{{ process_standard_number }}
    {{ workflow_path }}
    --force
  when:
  - not dedupe_done_file.stat.exists
  - nextflow_result.stdout|length == 0

- name: Get nextflow workflow
  copy:
    src: graph-from-standard.nf
    dest: "{{ workflow_path }}"
  when:
  - not dedupe_done_file.stat.exists
  - nextflow_result.stdout|length == 0

- name: Set nextflow command
  set_fact:
    nextflow_cmd: >-
      nextflow run graph-from-standard.nf
      --limit {{ process_limit }}
      --skip {{ process_skip }}
      {{ nextflow_extra_args }}
      {{ nextflow_debug_args }}
  when:
  - not dedupe_done_file.stat.exists
  - nextflow_result.stdout|length == 0

- name: Display nextflow command
  debug:
    var: nextflow_cmd
  when:
  - not dedupe_done_file.stat.exists
  - nextflow_result.stdout|length == 0

- name: Run nextflow (async)
  command: "{{ nextflow_cmd }}"
  args:
    chdir: "{{ workflow_path }}"
  async: "{{ nextflow_timeout_minutes|int * 60 }}"
  poll: 0
  register: nextflow_async
  when:
  - not dedupe_done_file.stat.exists
  - nextflow_result.stdout|length == 0

# Optionally wait for nextflow, polling at a user-defined interval...

- name: Wait for nextflow
  async_status:
    jid: "{{ nextflow_async.ansible_job_id }}"
  register: nextflow_result
  until: nextflow_result.finished
  delay: "{{ nextflow_poll_period_minutes|int * 60 }}"
  retries: "{{ (nextflow_timeout_minutes|int / nextflow_poll_period_minutes|int)|int }}"
  when:
  - not dedupe_done_file.stat.exists
