---

# Here we combine the nodes by chaining-together a series of processes,
# once for each type (i.e. molport, senp7), so that the original nodes.csv.gz
# is progressively augmented with each combination type. The original nodes
# file is replaced during each step, becoming the starting point for the
# next process.

- name: Check combination 'done' file
  stat:
    path: "{{ combiner_path }}/combine-done"
  register: combine_done_file

- name: Run process combination chain
  shell: >
    ./process_{{ item.value.type }}_compounds.py
    {{ standard_file }}
    {{ combiner_path }}/nodes.csv.gz
    {{ combiner_path }}
    --limit {{ process_limit }}
    --replace-input
  args:
    chdir: "{{ scripts }}"
  loop: "{{ lookup('dict', combination_set) }}"
  when: not combine_done_file.stat.exists

- name: Create combination 'done' file
  file:
    path: "{{ combiner_path }}/combine-done"
    state: touch
  when: not combine_done_file.stat.exists

# Now, generate the loader script...

- name: Create loader script
  shell: >
    ./graph_create_loader_script_from_directory.py {{ combiner_path }}
  args:
    chdir: "{{ scripts }}"
  loop: "{{ lookup('dict', combination_set) }}"
  when: not combine_done_file.stat.exists
