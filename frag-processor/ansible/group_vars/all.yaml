---

# Secrets (from the environment)
aws_access_key_id: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
aws_secret_access_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"

# The fragalysis 'scripts' directory
scripts: "{{ lookup('env','HOME') }}/{{ github_dir }}/fragalysis/frag/network/scripts"

# The S3 bucket for the key files
s3_bucket: "{{ lookup('env', 'FRAGALYSIS_S3_BUCKET') or 'im-fragnet' }}"
# Write results to S3 when done (at each stage)
s3_write: yes

# Clean start-up?
# If yes then all the working directories are erased when the playbook begins.
# If you simply want to restart an existing playbook
# then you probably want to set this to 'no'.
clean_start: no
# Clean shut-down?
# If yes then all the working directories are erased when the playbook ends.
# This will only happen if the playbook has completed successfully.
clean_finish: no

# Path to a directory we can use to checkout/clone to.
# This is a directory relative to the user's $HOME.
github_dir: git
# Temporary directory
tmp_dir: "{{ lookup('env','HOME') }}/tmp"

# The version of the fragalysis repo to clone.
# This can be the literal string HEAD, a branch name, a tag name.
fragalysis_version: 1-fragnet

# The nextflow version to install.
# This must be the nextflow repo release tag
# (excluding the initial 'v')
nextflow_version: 19.01.0
# The above is only used if nextflow_install is yes.
# In this case nextflow is installed in the user's bin directory.
nextflow_install: no

# Nextflow config.
# Timeouts (minutes):  2880 (2 days)
#                      7200 (5 days)
#                     10080 (7 days)
nextflow_extra_args:
nextflow_debug_args: -with-trace
nextflow_timeout_minutes: 7200
nextflow_executor: "{{ lookup('env', 'NXF_EXECUTOR') }}"
nextflow_mode: "{{ lookup('env', 'NXF_MODE') }}"
nextflow_run: yes

# The (S3) path to data for processing.
# The raw files and standard file is expected on this path
# and the build results are written back to it.
process_id: activity/senp7/v1

# The graph processing type (i.e. vendor).
# This is the name of the fragalysis process script to apply to the generated
# graph data. It converts the nodes/edges to graph files
# using the type or the standard (e.g. molport or senp7), creating
# the graph-compliant files. The scripts are called
# `process_{{ process_type }}_compounds.py and, at the time of writing, the
# available script types are 'enamine', 'molport' and 'senp7'.
process_type: senp7

# Skip and Limit processing (0 implies no skip/limit)
process_skip: 0
process_limit: 0
process_min_hac: 0
process_max_hac: 0
process_max_frag: 0

# The name of the generated standard file
standard_file: standardised-compounds.tab.gz
