#!groovyâ€‹

// The Production Fragalysis Stack (loader application).
//
// This pipeline is executed in order to promote
// the most recent 'latest' image (in the Developer project)
// to the 'stable' image in the Production project.
//
// You can start this job externally using curl with something like...
// assuming you have a <user> and <token>
//
// curl -X POST https://jenkins-fragalysis-cicd.apps.xchem.diamond.ac.uk/job/Promote%20Loader%20Image/build \
//       --user <user>:<token> \
//       --data-urlencode json='{"parameter": [{"name":"PROMOTE_BUILD", "value":"32"}, {"name":"AS_VERSION", "value":"1.2.0"}]}'


pipeline {

  agent { label 'buildah-slave' }

  environment {
    // User/Registry information.
    REGISTRY_USER = 'jenkins'
    REGISTRY = 'docker-registry.default:5000'
    DB_NAME = 'mysql-prod'

    // Source registry details
    SRC_PROJECT = 'fragalysis-cicd'
    SRC_STREAM_IMAGE = "${SRC_PROJECT}/loader-stream:latest"

    // Target registry details
    TGT_PROJECT = 'fragalysis-prod'
    TGT_STREAM_IMAGE = "${TGT_PROJECT}/loader-stream:stable"

    // Slack channel for all notifications
    SLACK_BUILD_CHANNEL = 'dls-builds'
    // Slack channel to be used for errors/failures
    // (which also go to the CI/CD channel)
    SLACK_ALERT_CHANNEL = 'dls-alerts'

  }

  stages {

    stage('Inspect') {
      steps {
        withCredentials([string(credentialsId: 'clusterUrl', variable: 'CLUSTER_URL'),
                         string(credentialsId: 'ocUser', variable: 'OC_USER'),
                         string(credentialsId: 'ocUserPassword', variable: 'OC_USER_PASSWORD')]) {

          slackSend channel: "#${SLACK_BUILD_CHANNEL}",
                    message: "${JOB_NAME} - promoting loader/${PROMOTE_BUILD} as version ${AS_VERSION}"

          // Expose the supplied parameters...
          echo "PROMOTE_BUILD is '${PROMOTE_BUILD}'"
          echo "AS_VERSION is '${AS_VERSION}'"

          // Does the build exist as a tagged image?
          sh "oc login ${CLUSTER_URL} -u ${OC_USER} -p ${OC_USER_PASSWORD}"
          sh "oc project ${SRC_PROJECT}"
          script {
            IMAGE_TAG = sh(script: "oc describe is loader-stream | grep latest-${PROMOTE_BUILD}\$ || true", returnStdout: true).trim()
          }
          echo "IMAGE_TAG is '${IMAGE_TAG}'"

        }
      }
    }

    stage('Missing Image') {
      when {
        expression { IMAGE_TAG.length() == 0 }
      }
      steps {
        script {
          // The build number that we're meant to tag does not exist.
          echo "OOOPS: The build number to promote (${PROMOTE_BUILD}) does not exist"
          currentBuild.result = 'FAILURE'
        }
      }
    }

    stage('Promote Image') {
      when {
        expression { IMAGE_TAG.length() > 0 }
      }
      steps {
        sh "oc tag ${SRC_STREAM_IMAGE}-${PROMOTE_BUILD} ${TGT_STREAM_IMAGE}"
        sh "oc project ${TGT_PROJECT}"
        script {
          LOADER_RUNNING = sh(script: 'oc get jobs | grep loader | grep Running | wc -l', returnStdout: true).trim()
        }
        echo "RUNNING=${LOADER_RUNNING}"
      }
    }

    stage('Deploy Image') {
      when {
        expression { IMAGE_TAG.length() > 0 && LOADER_RUNNING == '0' }
      }
      steps {
        dir('images/loader') {
          sh "oc delete job --selector template=fs-loader"
          sleep 4
          sh "oc process -p LOADER_NAMESPACE=${TGT_PROJECT} -p LOADER_IMAGE=${TGT_STREAM_IMAGE} -f fs-loader.yaml | oc create -f -"

          slackSend channel: "#${SLACK_BUILD_CHANNEL}",
                    color: 'good',
                    message: "${JOB_NAME} - complete"
        }
      }
    }

    stage('Blocked Image') {
      when {
        expression { IMAGE_TAG.length() > 0 && LOADER_RUNNING != '0' }
      }
      steps {
        echo "A prior loader is still running (deployment is blocked)"
        script {
          slackSend channel: "#${SLACK_BUILD_CHANNEL}",
                    color: 'warning',
                    message: "${JOB_NAME} - deployment blocked"

          // Everything's OK but we were blocked from deploying it
          // as it appears a prior Job instance is running.
          // Here we just set the build status to UNSTABLE.
          currentBuild.result = 'UNSTABLE'
        }
      }
    }

  }

  // Post-job actions.
  // See https://jenkins.io/doc/book/pipeline/syntax/#post
  post {

    failure {
      slackSend channel: "#${SLACK_BUILD_CHANNEL}",
                color: 'danger',
                message: "${JOB_NAME} build ${BUILD_NUMBER} - failed (${BUILD_URL})"
      slackSend channel: "#${SLACK_ALERT_CHANNEL}",
                color: 'danger',
                message: "${JOB_NAME} build ${BUILD_NUMBER} - failed (${BUILD_URL})"
    }

    unstable {
      slackSend channel: "#${SLACK_BUILD_CHANNEL}",
                color: 'warning',
                message: "${JOB_NAME} build ${BUILD_NUMBER} - complete (unstable)"
    }

    fixed {
      slackSend channel: "#${SLACK_ALERT_CHANNEL}",
                color: 'good',
                message: "${JOB_NAME} build - fixed"
    }

  }

}
