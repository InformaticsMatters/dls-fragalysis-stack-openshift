#!groovyâ€‹

// The Fragalysis Stack (Django application) Builder.

pipeline {

  agent { label 'buildah-slave' }

  environment {
    // Registry details
    USER = 'jenkins'
    REGISTRY = 'docker-registry.default:5000'
    STREAM_IMAGE = "${REGISTRY}/fragalysis-cicd/web-stream:latest"

    // get_unbuilt_data_dirtectory environment...
    SOURCE_DATA_ROOT = '/fragalysis/django_data'
    TARGET_IMAGE = 'fragalysis-cicd/web-stream'
    INSIST_ON_READY = 'Yes'
    HOURLY_DATA = 'No'
    FORCE_BUILD = 'Yes'
    BUILD_FROM_SOURCE = 'No'

    // Always push the image (whether it's new or not)
    ALWAYS_PUSH = 'No'
  }

  stages {

    stage('Inspect') {
      steps {
        dir('images') {
          script {
            DATA_ORIGIN = sh(script: './get_unbuilt_data_directory.py', returnStdout: true).trim()
          }
          sh 'cat get_unbuilt_data_directory.log'
        }
      }
    }

    stage('Build Backend') {
      when {
        expression { BUILD_FROM_SOURCE == 'Yes' && DATA_ORIGIN.length() > 0 }
      }
      steps {
        dir('images/web/backend') {
          echo "Building fragalysis-backend..."
          git url: 'https://github.com/xchem/fragalysis-backend.git'
          sh "buildah bud --format docker -f Dockerfile -t abradle/fragalysis_backend:latest"
        }
      }
    }

    stage('Build Stack') {
      when {
        expression { BUILD_FROM_SOURCE == 'Yes' && DATA_ORIGIN.length() > 0 }
      }
      steps {
        dir('images/web/stack') {
          echo "Building fragalysis-stack..."
          git url: 'https://github.com/xchem/fragalysis-stack.git'
          sh "buildah bud --format docker -f Dockerfile -t abradle/fragalysis_stack:latest"
          sh "buildah images"
        }
      }
    }

    stage('Build Image') {
      when {
        expression { DATA_ORIGIN.length() > 0 }
      }
      steps {
        dir('images/web') {
          echo "Building fragalysis-web..."
          sh "cp ${SOURCE_DATA_ROOT}/${DATA_ORIGIN}/* media"
          sh "buildah bud --format docker --build-arg DATA_ORIGIN=$DATA_ORIGIN -f Dockerfile -t ${STREAM_IMAGE}"
        }
      }
    }

    stage('Push Image') {
      when {
        expression { DATA_ORIGIN.length() > 0 || ALWAYS_PUSH == 'Yes' }
      }
      steps {
        script {
          TOKEN = sh(script: 'oc whoami -t', returnStdout: true).trim()
        }
        sh "podman login --tls-verify=false --username ${env.USER} --password ${TOKEN} ${env.REGISTRY}"
        sh "buildah push --tls-verify=false ${env.STREAM_IMAGE} docker://${env.STREAM_IMAGE}"
        sh "podman logout ${env.REGISTRY}"
      }
    }

  }

}
