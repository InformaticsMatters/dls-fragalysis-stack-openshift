#!groovyâ€‹

// The Production Fragalysis Stack (web application).
//
// This pipeline is executed in order to demote the web
// to a previously promoted version.
//
// You can start this job externally using curl with something like...
// assuming you have a <user> and <token>
//
// curl -X POST https://jenkins-fragalysis-dev.apps.xchem.diamond.ac.uk/job/Demote%20Loader%20Image/build \
//       --user <user>:<token> \
//       --data-urlencode json='{"parameter": [{"name":"TO_VERSION", "value":"1.2.0"}]}'


pipeline {

  agent { label 'buildah-slave' }

  environment {
    // User/Registry information.
    REGISTRY_USER = 'jenkins'
    REGISTRY = 'docker-registry.default.svc:5000'
    STREAM_NAME = 'web-stream'

    // Source registry details
    SRC_PROJECT = 'fragalysis-dev'
    SRC_STREAM_IMAGE = "${SRC_PROJECT}/${STREAM_NAME}"

    // Target registry details
    TGT_PROJECT = 'fragalysis-prod'
    TGT_STREAM_IMAGE = "${TGT_PROJECT}/${STREAM_NAME}:stable"

    // Slack channel for all notifications
    SLACK_BUILD_CHANNEL = 'dls-builds'
    // Slack channel to be used for errors/failures
    // (which also go to the CI/CD channel)
    SLACK_ALERT_CHANNEL = 'dls-alerts'
  }

  stages {

    stage('Inspect') {
      steps {
        withCredentials([string(credentialsId: 'clusterUrl', variable: 'CLUSTER_URL'),
                         string(credentialsId: 'ocUser', variable: 'OC_USER'),
                         string(credentialsId: 'ocUserPassword', variable: 'OC_USER_PASSWORD')]) {

          slackSend channel: "#${SLACK_BUILD_CHANNEL}",
                    message: "${JOB_NAME} - demoting to version ${TO_VERSION}"

          // Expose the supplied parameters...
          echo "TO_VERSION is '${TO_VERSION}'"

          // Does the version exist as a tagged image?
          // It must if we are to continue.
          //
          sh "oc login ${CLUSTER_URL} -u ${OC_USER} -p ${OC_USER_PASSWORD}"
          sh "oc project ${SRC_PROJECT}"
          script {
            IMAGE_TAG = sh(script: "oc describe is ${STREAM_NAME} | grep ^${TO_VERSION}\$ || true", returnStdout: true).trim()
            if (IMAGE_TAG.length() == 0) {
              error("Unable to demote the image - version '${TO_VERSION}' does not exist")
            }
          }

        }
      }
    }

    // With regard to the security probe
    // we must: -
    //
    //  - check for the presence of a probe and stop it (and pause)
    //  - push the new image
    //  - set deployment replicas to 1 (they may have been set to 0 by the probe)
    //  - deploy a new security probe

    stage('Stop Probe') {
      steps {

        script {
          sh "oc project ${TGT_PROJECT}"
          PROBE_COUNT = sh(script: 'oc get jobs | grep prod-security-probe | wc -l', returnStdout: true).trim()
          if (PROBE_COUNT != '0') {
            sh "oc delete job/fs-prod-security-probe"
            sleep 4
          }
        }

      }
    }

    // Demote the existing image from the local registry
    // to a 'stable' image that will trigger a deployment of the
    // production image.
    stage('Demote Image') {
      steps {

        // Tag 'TO_VERSION' as 'stable'
        // forcing a re-deploy in the production project
        sh "oc project ${SRC_PROJECT}"
        sh "oc tag ${SRC_STREAM_IMAGE}:${TO_VERSION} ${TGT_STREAM_IMAGE}"
        echo "Tagging ${SRC_STREAM_IMAGE}:${TO_VERSION} as ${TGT_STREAM_IMAGE}"

        // Restore replicas
        sh "oc project ${TGT_PROJECT}"
        sh "oc scale dc web-prod --replicas=1"

      }
    }

    stage('Deploy Probe') {
      steps {
        dir('images/promote-web') {

          sh "oc process -f fs-prod-security-probe.yaml | oc create -f -"

        }
      }
    }

  }

  // Post-job actions.
  // See https://jenkins.io/doc/book/pipeline/syntax/#post
  post {

    success {
      slackSend channel: "#${SLACK_BUILD_CHANNEL}",
                color: 'good',
                message: "${JOB_NAME} - complete"
    }

    failure {
      slackSend channel: "#${SLACK_BUILD_CHANNEL}",
                color: 'danger',
                message: "${JOB_NAME} build ${BUILD_NUMBER} - failed (${BUILD_URL})"
      slackSend channel: "#${SLACK_ALERT_CHANNEL}",
                color: 'danger',
                message: "${JOB_NAME} build ${BUILD_NUMBER} - failed (${BUILD_URL})"
    }

    unstable {
      slackSend channel: "#${SLACK_BUILD_CHANNEL}",
                color: 'warning',
                message: "${JOB_NAME} build ${BUILD_NUMBER} - complete (unstable)"
    }

    fixed {
      slackSend channel: "#${SLACK_ALERT_CHANNEL}",
                color: 'good',
                message: "${JOB_NAME} build - fixed"
    }

  }

}
