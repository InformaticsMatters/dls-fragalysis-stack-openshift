#!groovyâ€‹

// The Production Fragalysis Stack (web application).
//
// This pipeline is executed in order to promote
// the most recent 'latest' image (in the Developer project)
// to the 'stable' image (in the Production project).
//
// You can start this job externally using curl with something like...
// assuming you have a <user> and <token>
//
// curl -X POST https://jenkins-fragalysis-cicd.apps.xchem.diamond.ac.uk/job/Promote%20Web%20Image/build \
//       --user <user>:<token> \
//       --data-urlencode json='{"parameter": [{"name":"PROMOTE_BUILD", "value":"32"}, {"name":"AS_VERSION", "value":"1.2.0"}]}'

pipeline {

  agent { label 'buildah-slave' }

  environment {
    // User/Registry information.
    REGISTRY_USER = 'jenkins'
    IMAGE_NAME = 'web-stream'

    // Source registry details
    SRC_PROJECT = 'fragalysis-cicd'
    SRC_STREAM_IMAGE = "${SRC_PROJECT}/${IMAGE_NAME}:latest"

    // Target registry details
    TGT_PROJECT = 'fragalysis-prod'
    TGT_STREAM_IMAGE = "${TGT_PROJECT}/${IMAGE_NAME}:stable"

    // Slack channel for all notifications
    SLACK_BUILD_CHANNEL = 'dls-builds'
    // Slack channel to be used for errors/failures
    // (which also go to the CI/CD channel)
    SLACK_ALERT_CHANNEL = 'dls-alerts'

  }

  stages {

    stage('Inspect') {
      steps {
        withCredentials([string(credentialsId: 'clusterUrl', variable: 'CLUSTER_URL'),
                         string(credentialsId: 'ocUser', variable: 'OC_USER'),
                         string(credentialsId: 'ocUserPassword', variable: 'OC_USER_PASSWORD')]) {

          slackSend channel: "#${SLACK_BUILD_CHANNEL}",
                    message: "${JOB_NAME} - promoting build ${PROMOTE_BUILD} as version ${AS_VERSION}"

          // Expose the supplied parameters...
          echo "PROMOTE_BUILD is '${PROMOTE_BUILD}'"
          echo "AS_VERSION is '${AS_VERSION}'"

          // Does the build exist as a tagged image?
          sh "oc login ${CLUSTER_URL} -u ${OC_USER} -p ${OC_USER_PASSWORD}"
          sh "oc project ${SRC_PROJECT}"
          script {
            IMAGE_TAG = sh(script: "oc describe is ${IMAGE_NAME} | grep latest-${PROMOTE_BUILD}\$ || true", returnStdout: true).trim()
          }
          echo "IMAGE_TAG is '${IMAGE_TAG}'"

        }
      }
    }

    stage('Missing Image') {
      when {
        expression { IMAGE_TAG.length() == 0 }
      }
      steps {
        script {
          // The build number that we're meant to tag does not exist.
          echo "OOOPS: The build number to promote (${PROMOTE_BUILD}) does not exist"
          currentBuild.result = 'FAILURE'
        }
      }
    }

    stage('Promote Image') {
      when {
        expression { IMAGE_TAG.length() != 0 }
      }
      steps {
        sh "oc tag ${SRC_STREAM_IMAGE}-${PROMOTE_BUILD} ${TGT_STREAM_IMAGE}"
        slackSend channel: "#${SLACK_BUILD_CHANNEL}",
                  color: 'good',
                  message: "${JOB_NAME} - complete"
      }
    }

  }

  // Post-job actions.
  // See https://jenkins.io/doc/book/pipeline/syntax/#post
  post {

    failure {
      slackSend channel: "#${SLACK_BUILD_CHANNEL}",
                color: 'danger',
                message: "${JOB_NAME} build ${BUILD_NUMBER} - failed (${BUILD_URL})"
      slackSend channel: "#${SLACK_ALERT_CHANNEL}",
                color: 'danger',
                message: "${JOB_NAME} build ${BUILD_NUMBER} - failed (${BUILD_URL})"
    }

    unstable {
      slackSend channel: "#${SLACK_BUILD_CHANNEL}",
                color: 'warning',
                message: "${JOB_NAME} build ${BUILD_NUMBER} - complete (unstable)"
    }

    fixed {
      slackSend channel: "#${SLACK_ALERT_CHANNEL}",
                color: 'good',
                message: "${JOB_NAME} build - fixed"
    }

  }

}
