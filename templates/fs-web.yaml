---

# The Fragalysis Stack's Web (Front-End) deployment.
#
# oc process -f fs-web.yaml | oc create -f -
# oc delete all,route --selector template=fs-web

kind: Template
apiVersion: v1
metadata:
  name: fs-web
  annotations:
    description: Fragalysis Stack's Web Definition
    tags: fragalysis,web
labels:
  template: fs-web

parameters:

- name: BUSYBOX_IMAGE
  value: busybox:1.28.0

- name: WEB_HOSTNAME
  value: fragalysis.apps.xchem.diamond.ac.uk
- name: WEB_NAMESPACE
  value: fragalysis-cicd
- name: WEB_TAG
  value: 'latest'
- name: WEB_REPLICAS
  value: '1'
- name: WEB_NODE_SIZE_SELECTOR
  value: 'small'

- name: ISPYB_USER
  value: ispyb_api_fragalysis
- name: ISPYB_PASSWORD
  required: true
- name: ISPYB_HOST
  value: ispybdbproxy
- name: ISPYB_PORT
  value: '4306'

objects:

- kind: ImageStream
  apiVersion: v1
  metadata:
    name: web-stream
  spec:
    tags:
    - from:
        kind: DockerImage
        name: xchem/web:${WEB_TAG}
      name: latest

- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: web
    namespace: ${WEB_NAMESPACE}
  spec:
    replicas: ${WEB_REPLICAS}
    selector:
      name: web
    template:
      metadata:
        labels:
          name: web
      spec:
        nodeSelector:
          size: ${WEB_NODE_SIZE_SELECTOR}
        serviceAccountName: diamond

        # Init Containers
        initContainers:
        - image: ${BUSYBOX_IMAGE}
          name: wait-for-db
          command:
          - 'sh'
          - '-c'
          - 'until nslookup db; do echo waiting for db; sleep 1; done;'
        - image: ${BUSYBOX_IMAGE}
          name: wait-for-graph
          command:
          - 'sh'
          - '-c'
          - 'until nslookup neo4j; do echo waiting for neo4j; sleep 1; done;'
        - image: ${BUSYBOX_IMAGE}
          name: wait-for-cartridge
          command:
          - 'sh'
          - '-c'
          - 'until nslookup cartridge; do echo waiting for cartridge; sleep 1; done;'

        # Application containers
        containers:
        - name: web
          # Expect the earliest that the container can be ready is 60 seconds.
          # But check every 15 seconds and permit 36 failures before
          # considering the startup to have failed (that's about 10 minutes).
          readinessProbe:
            initialDelaySeconds: 60
            periodSeconds: 15
            timeoutSeconds: 3
            failureThreshold: 36
            tcpSocket:
              port: 80
          # Consider the container dead if the port is not open
          # after 4 attempts over a 2 minute period after about 10 minutes.
          livenessProbe:
            initialDelaySeconds: 630
            periodSeconds: 30
            timeoutSeconds: 3
            failureThreshold: 4
            tcpSocket:
              port: 80
          env:
          - name: WEB_DJANGO_SECRET_KEY
            valueFrom:
              secretKeyRef:
                name: fs-web-secrets
                key: django-secret-key
          - name: WEB_DJANGO_SUPERUSER_NAME
            valueFrom:
              secretKeyRef:
                name: fs-web-secrets
                key: django-superuser-name
          - name: WEB_DJANGO_SUPERUSER_PASSWORD
            valueFrom:
              secretKeyRef:
                name: fs-web-secrets
                key: django-superuser-password
          - name: WEB_DJANGO_SUPERUSER_EMAIL
            valueFrom:
              secretKeyRef:
                name: fs-web-secrets
                key: django-superuser-email
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                name: fs-mysql-secrets
                key: database-user
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: fs-mysql-secrets
                key: database-password
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: fs-mysql-secrets
                key: database-root-password
          - name: ISPYB_USER
            value: ${ISPYB_USER}
          - name: ISPYB_PASSWORD
            value: ${ISPYB_PASSWORD}
          - name: ISPYB_HOST
            value: ${ISPYB_HOST}
          - name: ISPYB_PORT
            value: ${ISPYB_PORT}
          ports:
          - containerPort: 80
        restartPolicy: Always

    triggers:
     - type: ConfigChange
     - type: ImageChange
       imageChangeParams:
         automatic: true
         containerNames:
         - web
         from:
           kind: ImageStreamTag
           name: web-stream:latest

- kind: Service
  apiVersion: v1
  metadata:
    name: web
    namespace: ${WEB_NAMESPACE}
  spec:
    ports:
    - name: http
      port: 8000
      targetPort: 80
    selector:
      name: web

- kind: Route
  apiVersion: v1
  metadata:
    annotations:
      kubernetes.io/tls-acme: 'false'
    name: web
  spec:
    host: ${WEB_HOSTNAME}
    to:
      kind: Service
      name: web
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect
