---

# Packer machine image configuration for a Nextflow/Docker machine.
#
# To use this file (Packer expects a JSON file) you need to
# use the project's yaml2json module to convert it to JSON.
# From this directory and a suitable Python (see root's requirements.txt)
# you can run...
#
#   ./packer-build.sh
#
# Your AMI ID will be displayed and available for use
# at the end of the Packer build. Simply replace the appropriate `amis`
# map variable with the the new AMI in Terraform's `variables.tf` file.

variables:

  aws_access_key: "{{env `TF_VAR_aws_access_key`}}"
  aws_secret_key: "{{env `TF_VAR_aws_secret_key`}}"
  aws_user: ec2-user
  aws_i_type: t2.micro
  our_name: Nextflow Base Image
  nextflow_dir: ../../nextflow
  base_ami_name: im-nf-6
  base_description: |-
    Amazon Linux 2018.03.0 HVM EBS with Nextflow & Docker

builders:

# AWS Builder - Ireland

- access_key: "{{user `aws_access_key`}}"
  secret_key: "{{user `aws_secret_key`}}"
  type: amazon-ebs
  region: eu-west-1
  # Amazon Linux AMI 2018.03.0 (HVM), SSD Volume Type
  source_ami: ami-e4515e0e
  # A VPC identification and a
  # a valid subnet for it...
  vpc_id: vpc-fcf29e9a
  subnet_id: subnet-a1bc02e9
  security_group_id: sg-6fca2813
  # We're using a non-default VPC
  # so we have to assign a public IP to the instance...
  associate_public_ip_address: true
  instance_type: "{{user `aws_i_type`}}"
  ssh_username: "{{user `aws_user`}}"
  name: "{{user `our_name`}} Ireland"
  ami_name: "{{user `base_ami_name`}}"
  ami_description: "{{user `description`}}"

provisioners:

- type: shell
  inline:
  - sudo yum update -y
  # Cloud-Init and Docker
  # and nfs-utils for EFS mounting and git...
  - sudo yum install -y cloud-init docker amazon-efs-utils nfs-utils git
  - sudo service docker start
  - sudo usermod -a -G docker ec2-user
  # Now move to Java 8...
  - sudo yum install -y java-1.8.0
  - sudo yum remove -y java-1.7.0-openjdk
  # And install Nextflow...
  - sudo wget -qO- https://get.nextflow.io | bash
